package jsii

import (
	"crypto/sha512"
	"testing"
)

func TestEmbeddedruntime(t *testing.T) {
	t.Run("embeddedruntime[embeddedruntimeMain] exists", func(t *testing.T) {
		if _, exists := embeddedruntime[embeddedruntimeMain]; !exists {
			t.Errorf("embeddedruntimeMain refers to non-existent file %s", embeddedruntimeMain)
		}
	})

	t.Run("embeddedruntime[\"bin/jsii-runtime.js\"]", func(t *testing.T) {
		checkEmbeddedFile(
			t,
			"bin/jsii-runtime.js",
			2_514,
			[sha512.Size]byte{
				0xcd, 0xbc, 0x33, 0xf4, 0x68, 0x33, 0x09, 0x8d, 0x6d, 0x39, 0xec, 0x72, 0x97, 0x46, 0xfb, 0xcf,
				0x28, 0x8b, 0xdd, 0x32, 0xcf, 0x9c, 0x93, 0xe6, 0xe5, 0x21, 0x5c, 0xaa, 0xcc, 0xf1, 0x1e, 0x7f,
				0x31, 0xd9, 0x62, 0x1e, 0xe2, 0x6d, 0x9f, 0xbc, 0x29, 0x84, 0x92, 0xda, 0xd7, 0xb8, 0x21, 0xcc,
				0x05, 0x9e, 0x59, 0xb3, 0xb0, 0x5c, 0x18, 0x15, 0x74, 0xd8, 0xe1, 0xd6, 0x2a, 0xd2, 0xb2, 0x8f,
			},
		)
	})

	t.Run("embeddedruntime[\"bin/jsii-runtime.js.map\"]", func(t *testing.T) {
		checkEmbeddedFile(
			t,
			"bin/jsii-runtime.js.map",
			5_431,
			[sha512.Size]byte{
				0x9a, 0xbd, 0x53, 0x58, 0xb7, 0xa5, 0xb6, 0xe0, 0x12, 0x3d, 0x3a, 0x6b, 0x4f, 0x60, 0x07, 0x83,
				0x31, 0xc6, 0xa2, 0x9a, 0xba, 0x1c, 0x62, 0x36, 0x36, 0xfd, 0x99, 0x09, 0xc9, 0xe2, 0xe8, 0xe0,
				0x74, 0xd3, 0xfe, 0xa1, 0x63, 0x9d, 0x50, 0x1a, 0x0c, 0xa0, 0x66, 0x16, 0x40, 0xeb, 0x50, 0xc1,
				0x75, 0xfe, 0x2c, 0x58, 0x7e, 0xe6, 0x66, 0xed, 0xcc, 0x9c, 0x11, 0x84, 0x36, 0x3d, 0x62, 0x9c,
			},
		)
	})

	t.Run("embeddedruntime[\"lib/program.js\"]", func(t *testing.T) {
		checkEmbeddedFile(
			t,
			"lib/program.js",
			466_791,
			[sha512.Size]byte{
				0x40, 0x77, 0xfb, 0x20, 0x93, 0xc9, 0x27, 0x63, 0xaf, 0x4c, 0x36, 0xb0, 0x2b, 0xb3, 0xd8, 0xf8,
				0xc1, 0x68, 0x2d, 0xb1, 0xc9, 0xe7, 0x0f, 0x9f, 0xbb, 0xf2, 0xce, 0xc9, 0x3b, 0x79, 0x77, 0xd6,
				0x64, 0xdf, 0x64, 0xfe, 0x58, 0x92, 0xbc, 0xf1, 0x74, 0x60, 0xd5, 0x25, 0x2c, 0x0a, 0x59, 0xa5,
				0xb4, 0x4a, 0xab, 0x33, 0x5f, 0xf6, 0x7b, 0x69, 0xcd, 0x1c, 0xeb, 0xfa, 0x68, 0x78, 0xd7, 0x4c,
			},
		)
	})

	t.Run("embeddedruntime[\"lib/program.js.map\"]", func(t *testing.T) {
		checkEmbeddedFile(
			t,
			"lib/program.js.map",
			694_881,
			[sha512.Size]byte{
				0x23, 0x2f, 0x47, 0xfb, 0x34, 0x99, 0x94, 0x7b, 0x91, 0xb2, 0x99, 0x70, 0x67, 0xb5, 0xff, 0x37,
				0xaa, 0x96, 0x19, 0xe1, 0xf0, 0xcb, 0x9b, 0xab, 0x08, 0x3b, 0xfe, 0x28, 0xad, 0x09, 0x46, 0x32,
				0x40, 0x3b, 0x0e, 0xf5, 0x12, 0x9c, 0x0f, 0x93, 0xba, 0x5f, 0xfc, 0x0d, 0x80, 0x10, 0xa1, 0xe8,
				0x81, 0x19, 0x23, 0x33, 0xb5, 0x65, 0xb3, 0x2f, 0x8e, 0x08, 0x7c, 0xeb, 0xfb, 0xc0, 0x7c, 0xb5,
			},
		)
	})
}

func checkEmbeddedFile(t *testing.T, name string, expectedSize int, expectedHash [sha512.Size]byte) {
	data := embeddedruntime[name]

	size := len(data)
	if size != expectedSize {
		t.Errorf("Size mismatch: expected %d bytes, got %d", expectedSize, size)
	}

	hash := sha512.Sum512(data)
	if hash != expectedHash {
		t.Errorf("SHA512 do not match:\nExpected: %x\nActual:   %x", expectedHash, hash)
	}
}
